
#pragma kernel ApplySkinDeform
#pragma kernel CalculateSkinTension

StructuredBuffer<float3> _NeutralPositions;
StructuredBuffer<float3> _NeutralNormals;

RWByteAddressBuffer _TargetMeshPosNormalBuffer;
RWByteAddressBuffer _TargetMeshColorBuffer;

int _NumberOfVertices;
int2 _PositionStrideOffset;
int2 _NormalStrideOffset;
int2 _ColorStrideOffset;

//Apply deform
ByteAddressBuffer _PositionAndNormalDeltas;

//tension
StructuredBuffer<float> _EdgeRestLengthsBuffer;
StructuredBuffer<int> _AdjacentVerticesBuffer;
StructuredBuffer<int> _AdjacentVerticesCountBuffer;
StructuredBuffer<int> _AdjacentOffsetsBuffer;
float _SkinTensionGain;


void fetchPositionAndNormalDeltas(in int vertexIndex, out float3 posOut, out float3 normalOut)
{
    const int packedEntrySize = 12;

    uint3 posNormalPacked = _PositionAndNormalDeltas.Load3(vertexIndex * packedEntrySize);
    
    float a = f16tof32(posNormalPacked.x & 0xFFFF);
    float b = f16tof32(posNormalPacked.x >> 16);
    float c = f16tof32(posNormalPacked.y & 0xFFFF);
    float d = f16tof32(posNormalPacked.y >> 16);
    float e = f16tof32(posNormalPacked.z & 0xFFFF);
    float f = f16tof32(posNormalPacked.z >> 16);


    posOut = float3(a, b, c);
    normalOut = float3(d, e, f);
}

[numthreads(64,1,1)]
void ApplySkinDeform (uint id : SV_DispatchThreadID)
{
    if(id < (uint)_NumberOfVertices)
    {
        float3 posDelta;
        float3 normalDelta;
        fetchPositionAndNormalDeltas(id, posDelta, normalDelta);

        float3 pos = _NeutralPositions[id];
        float3 norm = _NeutralNormals[id];

        pos += posDelta;
        norm += normalDelta;

        norm = normalize(norm);

        _TargetMeshPosNormalBuffer.Store3(id * _PositionStrideOffset.x + _PositionStrideOffset.y, asuint(pos));
        _TargetMeshPosNormalBuffer.Store3(id * _NormalStrideOffset.x + _NormalStrideOffset.y, asuint(norm));
        
    }
}

float gain(float x, float k)
{
    float a = 0.5f * pow(abs(2.0f * ((x < 0.5f) ? x : 1.0f - x)), k);
    return (x < 0.5f) ? a : 1.0f - a;
}

[numthreads(64,1,1)]
void CalculateSkinTension (uint id : SV_DispatchThreadID)
{
    if(id < (uint)_NumberOfVertices)
    {
        
        float avgEdgeLength = 0.0f;
        int adjacentCount = _AdjacentVerticesCountBuffer[id];
        int adjacentOffset = _AdjacentOffsetsBuffer[id];
        float avgEdgeLengthAtRest = _EdgeRestLengthsBuffer[id];

        float3 pos = asfloat(_TargetMeshPosNormalBuffer.Load3(id * _PositionStrideOffset.x + _PositionStrideOffset.y));
        
        for (int i = 0; i < adjacentCount; i++)
        {
            int idx = adjacentOffset + i;
            int neighbourIndex = _AdjacentVerticesBuffer[idx];
            float3 neighbourPos   = asfloat(_TargetMeshPosNormalBuffer.Load3(neighbourIndex * _PositionStrideOffset.x + _PositionStrideOffset.y));
            avgEdgeLength += length(neighbourPos - pos);
        }

        avgEdgeLength /= adjacentCount;

        float edgeDeltaValue = (avgEdgeLength - avgEdgeLengthAtRest) / avgEdgeLengthAtRest;
        float edgeDelta = saturate(gain(abs(edgeDeltaValue), _SkinTensionGain));

        uint color;

        if(edgeDeltaValue < 0)
        {
            color = uint(edgeDelta * 255);
        }
        else
        {
            color = uint(edgeDelta * 255) << 8;
        }

        _TargetMeshColorBuffer.Store(id * _ColorStrideOffset.x + _ColorStrideOffset.y, color);
       
    }

    
}

